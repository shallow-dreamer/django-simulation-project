"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from celery.schedules import crontab
from django.core.cache.backends.filebased import FileBasedCache
from django.core.cache.backends.redis import RedisCache
from django.core.cache.backends.locmem import LocMemCache
from app.core.cache.mixins import SubDirCacheMixin

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'django_celery_results',
    'django_celery_beat',
    'storages',
    
    # Local apps
    'app.core',
    'app.parameter',
    'app.com_simulation',
    'app.serder_simulation',
    'app.fom_chi',
    'app.collection',
    'app.external_data',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'django_db'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'password'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 文件存储配置
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
# 如果使用 S3，可以配置为：
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# 存储相关配置
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": BASE_DIR / "media",
            "base_url": "/media/",
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# 如果使用 S3，配置示例：
# STORAGES = {
#     "default": {
#         "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
#         "OPTIONS": {
#             "access_key": "your-access-key",
#             "secret_key": "your-secret-key",
#             "bucket_name": "your-bucket",
#             "region_name": "your-region",
#             "custom_domain": "cdn.yourdomain.com",  # 可选，用于自定义域名
#             "querystring_auth": False,  # 是否在URL中添加认证信息
#             "default_acl": "public-read",  # 文件访问权限
#         },
#     },
# }

# 如果使用 S3，添加以下配置
# AWS_ACCESS_KEY_ID = 'your-access-key'
# AWS_SECRET_ACCESS_KEY = 'your-secret-key'
# AWS_STORAGE_BUCKET_NAME = 'your-bucket-name'
# AWS_S3_REGION_NAME = 'your-region'

# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# 文件上传配置
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# 外部平台配置
EXTERNAL_PLATFORMS = {
    'platform1': {
        'base_url': 'https://api.platform1.com/v1',
        'timeout': 30,
        'retry_count': 3,
        'sync_schedule': {
            'daily_data': '0 0 * * *',  # 每天午夜执行
            'realtime_data': '*/15 * * * *',  # 每15分钟执行
        },
        'validators': {
            's_parameter': 'app.external_data.validators.SParameterDataValidator',
        }
    },
    'platform2': {
        'base_url': 'https://api.platform2.com/v1',
        'timeout': 30,
        'retry_count': 3,
        'sync_schedule': {
            'daily_data': '0 1 * * *',  # 每天凌晨1点执行
        },
        'cleanup': {
            'old_records_days': 30,
            'failed_records_hours': 24,
        }
    },
}

# Celery Beat 调度配置
CELERY_BEAT_SCHEDULE = {
    'sync-all-platforms-daily': {
        'task': 'app.external_data.tasks.sync_all_platforms_data',
        'schedule': crontab(hour=0, minute=0),  # 每天午夜执行
        'args': ('daily_data',),
    },
    'cleanup-old-records': {
        'task': 'app.external_data.tasks.cleanup_old_records',
        'schedule': crontab(hour=2, minute=0),  # 每天凌晨2点执行
    },
    'cleanup-simulation-results': {
        'task': 'app.parameter.tasks.cleanup_old_results',
        'schedule': crontab(hour=2, minute=0),  # 每天凌晨2点执行
    }
}

# 动态创建支持子目录的缓存类
class SubDirFileBasedCache(SubDirCacheMixin, FileBasedCache):
    pass

class SubDirRedisCache(SubDirCacheMixin, RedisCache):
    pass

class SubDirLocMemCache(SubDirCacheMixin, LocMemCache):
    pass

# 缓存配置
CACHES = {
    # 方案一：使用自定义缓存后端
    'custom_file': {
        'BACKEND': 'app.core.cache.backends.CustomFileCache',
        'LOCATION': '/var/tmp/django_cache/custom',
    },
    
    # 方案二：使用混入类扩展的缓存后端
    'file': {
        'BACKEND': 'app.core.cache.backends.SubDirFileBasedCache',
        'LOCATION': '/var/tmp/django_cache/mixin',
    },
}

# 缓存超时设置
CACHE_TIMEOUTS = {
    'short': 300,      # 5分钟
    'medium': 3600,    # 1小时
    'long': 86400,     # 24小时
}

# 缓存键前缀
CACHE_KEY_PREFIX = 'rf_'

# URL配置
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# 仿真结果配置
SIMULATION_RESULTS_EXPIRY_DAYS = 30  # 结果保留天数
SIMULATION_MAX_RETRIES = 3           # 最大重试次数
SIMULATION_RETRY_DELAY = 300         # 重试延迟（秒）
